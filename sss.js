const fs = require('fs');
const path = require('path');
const axios = require('axios');
const express = require('express');
const app = express();

// **ÈÖçÁΩÆ**
const LOCAL_VERSION_FILE = path.join(__dirname, 'version.txt');
const REMOTE_VERSION_URL = 'https://example.com/version.txt';  // ËøúÁ®ãÁâàÊú¨Âú∞ÂùÄ
const REMOTE_DIR_URL = 'https://example.com/files/';            // ËøúÁ®ãÊñá‰ª∂ÁõÆÂΩï
const DOMAIN_DIR = path.join(__dirname, 'domain');              // Êú¨Âú∞Êñá‰ª∂ÁõÆÂΩï
const EXCLUDED_FILES = ['README.md'];                           // ÊéíÈô§ÁöÑËøúÁ®ãÊñá‰ª∂
const EXCLUDED_DIRS = ['public', 'tmp'];                        // ÊéíÈô§ÁöÑÊú¨Âú∞ÁõÆÂΩï

// **Ëé∑ÂèñÊú¨Âú∞ÁâàÊú¨Âè∑**
function getLocalVersion() {
    if (!fs.existsSync(LOCAL_VERSION_FILE)) return "0.0.0";
    return fs.readFileSync(LOCAL_VERSION_FILE, 'utf-8').trim();
}

// **Ëé∑ÂèñËøúÁ®ãÁâàÊú¨Âè∑**
async function getRemoteVersion() {
    try {
        const response = await axios.get(`${REMOTE_VERSION_URL}?_=${Date.now()}`);
        return response.data.trim();
    } catch (error) {
        console.error(`‚ùå Ëé∑ÂèñËøúÁ®ãÁâàÊú¨Âè∑Â§±Ë¥•: ${error.message}`);
        return null;
    }
}

// **Ëé∑ÂèñËøúÁ®ãÊñá‰ª∂ÂàóË°®Âπ∂ÊéíÈô§ÊåáÂÆöÊñá‰ª∂**
async function getRemoteFileList() {
    try {
        const response = await axios.get(`${REMOTE_DIR_URL}file_list.txt?_=${Date.now()}`);
        const files = response.data.split("\n").map(file => file.trim()).filter(file => file);
        return files.filter(file => !EXCLUDED_FILES.includes(file) && file !== 'version.txt');  // ÊéíÈô§ version.txt ÂíåÊéíÈô§ÁöÑÊñá‰ª∂
    } catch (error) {
        console.error(`‚ùå Ëé∑ÂèñËøúÁ®ãÊñá‰ª∂ÂàóË°®Â§±Ë¥•: ${error.message}`);
        return null;
    }
}

// **Ëé∑ÂèñÊú¨Âú∞Êñá‰ª∂ÂàóË°®Âπ∂ÊéíÈô§ÊåáÂÆöÁöÑÊñá‰ª∂Â§π**
function getLocalFiles(dir) {
    let files = [];
    if (!fs.existsSync(dir)) return files;

    const items = fs.readdirSync(dir);
    for (const item of items) {
        const itemPath = path.join(dir, item);
        
        // **Ë∑≥ËøáÊåáÂÆöÁöÑÁõÆÂΩï**
        if (EXCLUDED_DIRS.includes(item)) {
            console.log(`üü° Ë∑≥ËøáÊñá‰ª∂Â§π: ${itemPath}`);
            continue;
        }

        if (fs.statSync(itemPath).isDirectory()) {
            files = files.concat(getLocalFiles(itemPath));
        } else {
            files.push(path.relative(DOMAIN_DIR, itemPath));
        }
    }
    return files;
}

// **‰∏ãËΩΩËøúÁ®ãÊñá‰ª∂**
async function downloadFile(fileName) {
    try {
        const response = await axios.get(`${REMOTE_DIR_URL}${fileName}?_=${Date.now()}`, { responseType: 'arraybuffer' });
        const filePath = path.join(DOMAIN_DIR, fileName);
        fs.mkdirSync(path.dirname(filePath), { recursive: true });
        fs.writeFileSync(filePath, response.data);
        console.log(`‚úÖ ${fileName} ‰∏ãËΩΩÊàêÂäü`);
        return { file: fileName, success: true, message: `‚úÖ ${fileName} Êõ¥Êñ∞ÊàêÂäü` };
    } catch (error) {
        console.error(`‚ùå ‰∏ãËΩΩÂ§±Ë¥•: ${fileName} - ${error.message}`);
        return { file: fileName, success: false, message: `‚ùå ${fileName} ‰∏ãËΩΩÂ§±Ë¥•` };
    }
}

// **Ê£ÄÊü•Âπ∂Êõ¥Êñ∞Êñá‰ª∂**
async function checkForUpdates() {
    console.log("üîç ÂºÄÂßãÊ£ÄÊü•Êõ¥Êñ∞...");

    const remoteVersion = await getRemoteVersion();
    if (!remoteVersion) return [{ file: "Êó†", success: false, message: "‚ùå Êó†Ê≥ïËé∑ÂèñËøúÁ®ãÁâàÊú¨Âè∑" }];

    const localVersion = getLocalVersion();
    console.log(`üìå Êú¨Âú∞ÁâàÊú¨: ${localVersion}, ËøúÁ®ãÁâàÊú¨: ${remoteVersion}`);

    // **ÁâàÊú¨Âè∑Áõ∏ÂêåÔºåË∑≥ËøáÊõ¥Êñ∞**
    if (localVersion === remoteVersion) {
        console.log("‚úÖ Êñá‰ª∂Â∑≤ÊòØÊúÄÊñ∞ÔºåÊó†ÈúÄÊõ¥Êñ∞");
        return [
            { file: "ÁâàÊú¨‰ø°ÊÅØ", success: true, message: `üìå Êú¨Âú∞ÁâàÊú¨: ${localVersion}` },
            { file: "ÁâàÊú¨‰ø°ÊÅØ", success: true, message: `üìå ËøúÁ®ãÁâàÊú¨: ${remoteVersion}` }
        ];
    }

    console.log("üîÑ ÁâàÊú¨Âè∑‰∏çÂêåÔºåÂºÄÂßãÊõ¥Êñ∞...");
    const remoteFiles = await getRemoteFileList();
    if (!remoteFiles) return [{ file: "Êó†", success: false, message: "‚ùå Êó†Ê≥ïËé∑ÂèñËøúÁ®ãÊñá‰ª∂ÂàóË°®" }];

    let results = [];
    for (const fileName of remoteFiles) {
        results.push(await downloadFile(fileName));  // ‰∏ãËΩΩÊñá‰ª∂Êó∂ËæìÂá∫ÁÆÄÊ¥ÅÁöÑÁªìÊûú
    }

    // **Âà†Èô§Êú¨Âú∞Â§ö‰ΩôÁöÑÊñá‰ª∂**
    const localFiles = getLocalFiles(DOMAIN_DIR);
    for (const fileName of localFiles) {
        if (!remoteFiles.includes(fileName) && !EXCLUDED_FILES.includes(fileName)) {
            fs.unlinkSync(path.join(DOMAIN_DIR, fileName));  // Âà†Èô§Êñá‰ª∂‰ΩÜ‰∏çËæìÂá∫
            results.push({ file: fileName, success: true, message: `üóëÔ∏è ${fileName} Ë¢´Âà†Èô§ÔºàËøúÁ®ã‰∏çÂ≠òÂú®Ôºâ` });
        }
    }

    // **Êõ¥Êñ∞Êú¨Âú∞ `version.txt`**
    fs.writeFileSync(LOCAL_VERSION_FILE, remoteVersion);
    console.log(`üì¢ ÁâàÊú¨Êõ¥Êñ∞ÂÆåÊàêÔºåÊñ∞ÁâàÊú¨Âè∑: ${remoteVersion}`);
    
    // ËøîÂõûÊõ¥Êñ∞ÁªìÊûúÂπ∂ÂåÖÂê´ÁâàÊú¨‰ø°ÊÅØÔºåÊéíÈô§ `version.txt`
    return [
        { file: "ÁâàÊú¨‰ø°ÊÅØ", success: true, message: `üìå Êú¨Âú∞ÁâàÊú¨: ${localVersion}` },
        { file: "ÁâàÊú¨‰ø°ÊÅØ", success: true, message: `üìå ËøúÁ®ãÁâàÊú¨: ${remoteVersion}` },
        ...results.filter(result => result.file !== 'version.txt') // ÊéíÈô§ version.txt Êõ¥Êñ∞ÁªìÊûú
    ];
}

// **Â§ÑÁêÜ `/update` ËØ∑Ê±Ç**
app.get('/update', async (req, res) => {
    try {
        console.log("üõ†Ô∏è Ê≠£Âú®Ê£ÄÊü•Êõ¥Êñ∞...");
        const updateResults = await checkForUpdates();

        // **Â¶ÇÊûúËØ∑Ê±ÇÊòØ AJAXÔºàfetchÔºâÔºåËøîÂõû JSON**
        if (req.headers.accept && req.headers.accept.includes('application/json')) {
            return res.json(updateResults);
        }

        // **Âê¶ÂàôÔºåËøîÂõû HTML**
        res.send(`
        <!DOCTYPE html>
        <html lang="zh-CN">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Êñá‰ª∂Êõ¥Êñ∞Ê£ÄÊü•</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    background-color: #f4f4f9;
                    margin: 0;
                    padding: 0;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                }
                .container {
                    width: 80%;
                    max-width: 800px;
                    padding: 20px;
                    background-color: #fff;
                    border-radius: 8px;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                }
                h1 {
                    text-align: center;
                    color: #333;
                }
                button {
                    display: block;
                    margin: 20px auto;
                    padding: 10px 20px;
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                    font-size: 16px;
                    transition: background-color 0.3s;
                }
                button:hover {
                    background-color: #45a049;
                }
                #result {
                    margin-top: 20px;
                    font-size: 16px;
                }
                .result-item {
                    padding: 10px;
                    border-radius: 5px;
                    margin-bottom: 10px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
                .success {
                    background-color: #e7f9e7;
                    color: #4CAF50;
                }
                .failure {
                    background-color: #ffe6e6;
                    color: #f44336;
                }
                .info {
                    background-color: #e0f7fa;
                    color: #0288d1;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Êñá‰ª∂Êõ¥Êñ∞Ê£ÄÊü•</h1>
                <button onclick="checkForUpdates()">Ê£ÄÊü•Êõ¥Êñ∞</button>
                <div id="result"></div>
            </div>

            <script>
                async function checkForUpdates() {
                    try {
                        const response = await fetch('/update', { headers: { 'Accept': 'application/json' } });
                        const data = await response