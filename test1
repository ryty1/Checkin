require('dotenv').config();
const express = require("express");
const { exec } = require("child_process");
const fs = require("fs");
const path = require("path");
const app = express();

app.use(express.json());
let logs = [];
let latestStartLog = "";
function logMessage(message) {
    logs.push(message);
    if (logs.length > 5) logs.shift();
}
function executeCommand(command, actionName, isStartLog = false, callback) {
    exec(command, (err, stdout, stderr) => {
        const timestamp = new Date().toLocaleString();
        if (err) {
            logMessage(`${actionName} 执行失败: ${err.message}`);
            if (callback) callback(err.message);
            return;
        }
        if (stderr) {
            logMessage(`${actionName} 执行标准错误输出: ${stderr}`);
        }
        const successMsg = `${actionName} 执行成功:\n${stdout}`;
        logMessage(successMsg);
        if (isStartLog) latestStartLog = successMsg;
        if (callback) callback(stdout);
    });
}
function runShellCommand() {
    const command = `cd ${process.env.HOME}/serv00-play/singbox/ && bash start.sh`;
    executeCommand(command, "start.sh", true);
}

function KeepAlive() {
    const command = `cd ${process.env.HOME}/serv00-play/ && bash keepalive.sh`;
    executeCommand(command, "keepalive.sh", true);
}
setInterval(KeepAlive, 20000);

app.get("/info", (req, res) => {
    runShellCommand();
    KeepAlive();
    res.type("html").send(`
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
            <title>系统状态</title>
            <style>
                body {
                    margin: 0;
                    font-family: Arial, sans-serif;
                    background-color: #f4f4f4;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    width: 100vw;
                    padding: 0;
                    overflow: hidden;
                }

                .content-container {
                    width: 95%;
                    max-width: 900px;
                    background-color: #fff;
                    padding: 20px;
                    border-radius: 8px;
                    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
                    box-sizing: border-box;
                    text-align: center;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    align-items: center;
                }

                .dynamic-text {
                    font-size: max(25px, 4vw);
                    font-weight: bold;
                    margin-bottom: 20px;
                    line-height: 1.3;
                    text-align: center;
                    white-space: nowrap;
                }

                @keyframes growShrink {
                    0% { transform: scale(1); }
                    50% { transform: scale(1.15); }
                    100% { transform: scale(1); }
                }

                .dynamic-text span {
                    display: inline-block;
                    animation: growShrink 1s infinite;
                    animation-delay: calc(0.08s * var(--char-index));
                }

                /* 强制每行显示两个按钮 */
                .button-container {
                    margin-top: 30px;
                    display: flex;
                    flex-wrap: wrap;
                    gap: 10px;
                    justify-content: space-between; /* 让按钮两两分布 */
                    width: 100%; /* 容器宽度设置为 100% */
                    box-sizing: border-box;
                }

                /* 按钮样式 */
                button {
                    padding: 12px 25px;
                    font-size: 20px;
                    background-color: #4CAF50; /* 绿色背景 */
                    color: white;
                    border: none;
                    border-radius: 4px;
                    cursor: pointer;
                    transition: background-color 0.3s ease, transform 0.1s;
                    width: 45%; /* 保证每个按钮宽度为 48%，两列显示 */
                    min-width: 150px; /* 保证按钮不会过窄 */
                    box-sizing: border-box;
                }

                button:hover {
                    background-color: #45a049; /* 悬停时稍微深一点的绿色 */
                    transform: scale(1.05);
                }

                /* 响应式调整 */
                @media (max-width: 600px) {
                    .dynamic-text {
                        font-size: max(18px, 5vw);
                    }

                    .button-container {
                        flex-direction: row; /* 保证按钮横向排列 */
                        width: 100%; /* 保证容器宽度适配 */
                    }

                    button {
                        font-size: 16px;
                        width: 45%; /* 每行两个按钮 */
                        min-width: 120px; /* 最小宽度保证 */
                    }

                    .content-container {
                        padding: 15px;
                    }
                }
            </style>
        </head>
        <body>
            <div class="content-container">
                <div class="dynamic-text">
                    ${"SingBox 已 复 活".split("").map((char, index) => 
                        `<span style="--char-index: ${index};">${char}</span>`).join("")}
                </div>
                <div class="dynamic-text">
                    ${"HtmlOnLive 守护中".split("").map((char, index) => 
                        `<span style="--char-index: ${index + 10};">${char}</span>`).join("")}
                </div>
                <div class="button-container">
                    <button onclick="window.location.href='/hy2ip'">换HY2_IP</button>
                    <button onclick="window.location.href='/node'">节点信息</button>
                    <button onclick="window.location.href='/log'">查看日志</button>
                    <button onclick="window.location.href='/ota'">检查更新</button>
                </div>
            </div>
        </body>
        </html>
    `);
});



app.use((req, res, next) => {
    const validPaths = ["/info"];
    if (validPaths.includes(req.path)) {
        return next();
    }
    res.status(404).send("页面未找到");
});
app.listen(3000, () => {
    const timestamp = new Date().toLocaleString();
    const startMsg = `${timestamp} 服务器已启动，监听端口 3000`;
    logMessage(startMsg);
    console.log(startMsg);
});
